import datetime
import os

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InputFile, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, \
    ContentTypes
import random
from bot import bot, dp
from states.user import TopUpStates, WithdrawStates
from config import Config
from services.xbet import CashdeskAPI
from services.sql import DataBase
from enum import Enum





# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
api = CashdeskAPI(
    api_url="https://partners.servcul.com/CashdeskBotAPI/",
    hash_key="b2d73cf41c1d6ccb5d2b3bff3814d714ad7e6a045502e783fdf515c2d52b716a",
    cashier_pass="8G9xuW5yg2^7",
    cashdesk_id="1265128"
)
# dp_path = os.getenv("DB_PATH")
# db = DataBase(db_file=dp_path)
db = DataBase('base.db')


#################################################### –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ###################################################
@dp.message_handler(text=('‚ûï –ü–û–ü–û–õ–ù–ï–ù–ò–ï'))
async def cabinet(message: Message, state: FSMContext):
    photo = InputFile("image/where_to_find_id.jpg")
    await bot.send_photo(message.from_user.id, photo=photo, caption='–í–≤–µ–¥–∏—Ç–µ ID (–ù–æ–º–µ—Ä –°—á—ë—Ç–∞) 1XBET!')
    await state.set_state(TopUpStates.wait_for_account_number)


@dp.message_handler(content_types=['text'], state=TopUpStates.wait_for_account_number)
async def find_limits(message: Message, state: FSMContext):
    if message.text == "–í–´–í–û–î üì§":
        photo = InputFile("image/where_to_find_id_.jpg")
        await bot.send_photo(message.from_user.id, photo=photo, caption='–í–≤–µ–¥–∏—Ç–µ ID (–ù–æ–º–µ—Ä –°—á—ë—Ç–∞) 1XBET!')
        await state.set_state(WithdrawStates.wait_for_account_number)
        return

    if not message.text:
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    try:
        account_id = int(message.text)
    except ValueError:
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    try:
        account = await api.find_user(account_id)
        if not account:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
            return
        elif account.get('CurrencyId') != 1:
            await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–ª—é—Ç–∞ —Å—á—ë—Ç–∞ - –†—É–±–ª—å.")
            return

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–∞", e)
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        return
    print(account)
    await state.update_data(account_id=account_id)
    await message.answer(f"üÜîID –∏–≥—Ä–æ–∫–∞: {account['UserId']}\n‚úâÔ∏è–§–ò–û: {account['Name']}\n\nüíµ–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è RUB.\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: 1.000 –†–£–ë\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: 3.500 –†–£–ë</b>")
    await db.update_users_default_account_id(account_id, message.from_user.id)
    await state.set_state(TopUpStates.wait_for_transfer_amount)


@dp.message_handler(content_types=['text'], state=TopUpStates.wait_for_transfer_amount)
async def set_transfer_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    try:
        transfer_amount = int(message.text)
        if transfer_amount < 1000:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1000.\n")
            return
        elif transfer_amount > 3500:
            await message.answer(" –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–º–∞ 3500.")
            return
    except ValueError:
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()

    card = await db.get_requisites_ready()
    card = random.choice(card)

    kasa_data = await api.get_balance(datetime.datetime.now())
    kasa_balance = kasa_data.get('Limit')
    from .admin import flag_top_up
    if flag_top_up:
        if kasa_balance > transfer_amount:
            if card:
                transfer_id = await db.create_transfer(transfer_amount, data['account_id'], "CREATE", 'TOP_UP', user_id)
                await message.answer(f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\nüè¶–ë–∞–Ω–∫: {card[1]}\nüí≥–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>{card[2]}</code>")
                await message.answer('<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞-–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —á—ë—Ç–∫–æ –≤–∏–¥–Ω—ã –≤—Ä–µ–º—è –∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –î—Ä—É–≥–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω—è—Ç—ã.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã</b>')
            else:
                await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µüïü")
                await state.finish()
                return
            await state.update_data(transfer_id=transfer_id, transfer_amount=transfer_amount, card=card, bank={card[1]})
            await state.set_state(TopUpStates.wait_for_check)
        else:
            await message.answer(
                f"<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ\n–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è</b>")
            await state.finish()
    else:
        await message.answer(
            f"<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ\n–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è</b>")
        await state.finish()

@dp.message_handler(content_types=['photo'], state=TopUpStates.wait_for_check)
async def confirm_transfer(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username

    data = await state.get_data()
    photo = message.photo[0].file_id
    await db.update_transfer("SEND_MONEY", data.get('transfer_id'))
    await message.reply(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{data.get('transfer_id')} –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        f"üÜî: {data.get('account_id')}\n"
        f"üíµ –°—É–º–º–∞: {data.get('transfer_amount')}\n"
        "‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 10 –º–∏–Ω—É—Ç. –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –¥–æ 3 —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!"
    )
    await db.update_transfer("WAIT_COMPLETE", data.get('transfer_id'))
    await bot.send_photo(Config.channel_id_top_up, photo=photo,
                         caption=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n–°—É–º–º–∞ {data.get('transfer_amount')}\n–ë–∞–Ω–∫: {data.get('bank')}\n–ö–∞—Ä—Ç–∞ {data.get('card')[2]}\n–ó–∞—è–≤–∫–∞ #{data.get('transfer_id')}"
                                 f"\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\nID: <code>{user_id}</code>\nUsername: @{username}\n1XBet_ID: <code>{data.get('account_id')}</code>",
                         reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"btn:confirm_top_up:{user_id}:{data.get('transfer_id')}:{data.get('card')[0]}")))
    await state.finish()

@dp.message_handler(content_types=ContentTypes.VIDEO)
async def confirm_transfer(message: Message, state: FSMContext):
    print(message.video.file_id)