import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import Config
from states.user import WithdrawStates, TopUpStates
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InputFile
from services.xbet import CashdeskAPI
from services.sql import DataBase
from bot import bot, dp
from enum import Enum

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
api = CashdeskAPI(
    api_url="***",
    hash_key="***",
    cashier_pass="***",
    cashdesk_id="***"
)

import os
# dp_path = os.getenv("DB_PATH")
# db = DataBase(db_file=dp_path)
db = DataBase('base.db')

logger = logging.getLogger(__name__)

@dp.message_handler(text=('–í–´–í–û–î üì§'))
async def cabinet(message: Message, state: FSMContext):
    photo = InputFile("image/where_to_find_id_.jpg")
    await bot.send_photo(message.from_user.id, photo=photo, caption='–í–≤–µ–¥–∏—Ç–µ ID (–ù–æ–º–µ—Ä –°—á—ë—Ç–∞) 1XBET!')
    await state.set_state(WithdrawStates.wait_for_account_number)


@dp.message_handler(state=WithdrawStates.wait_for_account_number)
async def set_account_number(message: Message, state: FSMContext):
    if message.text == "‚ûï –ü–û–ü–û–õ–ù–ï–ù–ò–ï":
        photo = InputFile("image/where_to_find_id.jpg")
        await bot.send_photo(message.from_user.id, photo=photo, caption='–í–≤–µ–¥–∏—Ç–µ ID (–ù–æ–º–µ—Ä –°—á—ë—Ç–∞) 1XBET!')
        await state.set_state(TopUpStates.wait_for_account_number)
        return 

    if not message.text:
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    try:
        account_id = int(message.text)
    except ValueError:
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    try:
        account = await api.find_user(account_id)
        if not account:
            await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–ª—é—Ç–∞ —Å—á—ë—Ç–∞ - –†—É–±–ª—å.")
            return
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞", exc_info=e)
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await state.update_data(account_id=account_id)
    await message.answer(f"üÜîID –∏–≥—Ä–æ–∫–∞: {account['UserId']}\n‚úâÔ∏è–§–ò–û: {account['Name']}")
    await WithdrawStates.wait_for_secure_code.set()
    await state.update_data(account_id=account['UserId'])
    await message.answer_photo(
        photo=InputFile("image/img.png"),
        caption=(
            "üìç–ó–∞—Ö–æ–¥–∏–ºüëá\n"
            "üìç1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏!\n"
            "üìç2. –í—ã–≤–µ—Å—Ç–∏ —Å–æ —Å—á–µ—Ç–∞!\n"
            "üìç3. –ù–∞–ª–∏—á–Ω—ã–µ\n"
            "üìç4.–°—É–º–º—É –¥–ª—è –í—ã–≤–æ–¥–∞!\n"
            "–ì–æ—Ä–æ–¥: –†—Ç–∏—â–µ–≤–æ\n"
            "–£–ª–∏—Ü–∞: Market Assistant (24/7)\n"
            "üìç5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
            "üìç6. –ü–æ–ª—É—á–∏—Ç—å –ö–æ–¥!\n"
            "üìç7. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–º\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã üëá\n"
            "üë®‚Äçüíª–û–ø–µ—Ä–∞—Ç–æ—Ä: @Market_Assistant_robot_Support"
        ),
    )
    await message.answer('<b>–û–∂–∏–¥–∞–µ–º –∫–æ–¥...</b>')


@dp.message_handler(state=WithdrawStates.wait_for_secure_code)
async def set_secure_code_handler(message: Message, state: FSMContext):
    await WithdrawStates.wait_for_user_payments_info.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    await state.update_data(secure_code=message.text)


@dp.message_handler(state=WithdrawStates.wait_for_user_payments_info)
async def send_user_payments_info(message: Message, state: FSMContext):
    await state.update_data(req=message.text)

    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    try:
        payout = await api.payout(
            account_id=data['account_id'],
            secure_code=data['secure_code']
        )
        transfer_id = await db.create_transfer(payout["Summa"], data['account_id'], "CREATE", 'PAYOUT', user_id)
        await state.update_data(transfer_id=transfer_id)
        if payout['Success'] == False:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{transfer_id} –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                f"üÜî: {payout['Summa']}\n"
                f"üíµ –°—É–º–º–∞: {data.get('transfer_amount')}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {data.get('req')}\n"
                "‚ö†Ô∏è –í—ã–≤–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 3 —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!"
            )
            await bot.send_message(Config.channel_id_payout,
                                   text=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n–°—É–º–º–∞: {payout['Summa']}\n–ö–∞—Ä—Ç–∞: <code>{data.get('req')}</code>\n–ó–∞—è–≤–∫–∞ #{transfer_id}\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\nID: <code>{user_id}</code>\nUsername: @{username}\n1XBet_ID: <code>{data.get('account_id')}</code>",
                                   reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å",
                                                                                                           callback_data=f"btn:confirm_payout:{user_id}:{transfer_id}:card_id")))
            await db.update_transfer("WAIT_COMPLETE", transfer_id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞", exc_info=e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await state.finish()
    # {'Summa': -2000.0, 'OperationId': 4242578115, 'Success': True, 'Message': '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'}

